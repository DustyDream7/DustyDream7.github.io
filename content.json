{"pages":[],"posts":[{"title":"","text":"安装CentOSSMJB Q&amp;A：忘记开网卡了 使用root账户查看网关 123su root#输入密码cat /etc/resolv.conf 或者可以在同级路由的windows查看网关 1ipconfig 修改网卡配置文件，保存并退出 123456789cd /etc/sysconfig/network-scripts/dirvi ifcfg-eth0#ONBOOT=yes#BOOTPROTO=staticIPADDR=192.168.189.233NETMASK=255.255.255.0GATEWAY=192.168.176.1#esc : w q enter 重启网卡，并查看ip 1systemctl restart network &amp;&amp; ip addr 没把用户设置成管理员 编辑/etc/sudoers 12345vi /etc/sudoers#在root ALL=(ALL) ALL#添加#用户名 ALL=(ALL) ALL#esc : w q ! enter 安装Xfce 安装额外包yum源和更新系统 12sudo yum install epel-releasesudo yum update 安装Xfce，检验并设为默认桌面 123yum groupinstall xfcesudo systemctl isolate graphical.targetsudo systemctl set-default graphical.target 安装中文字体 1yum install cjkuni-ukai-fonts 安装Firefox 1yum install firefox 安装xrdp 依次安装xrdp所需要的环境 1yum install xrdp tigervnc tigervnc-server 1sudo apt-get install tightvncserver 设置vnc密码 12345vncpasswd# 设置当前用户的vnc密码 如果要设置用户 k 的 vnc 登陆密码，则先切换用户su kvncpasswd# 当然，你也可以再设置一个view-only passwd 打开3389端口，并重启防火墙 12sudo firewall-cmd --permanent --zone=public --add-port=3389/tcpsudo firewall-cmd --reload 启动xrdp服务，并设置开机启动 123sudo systemctl start xrdpsudo systemctl enable xrdp# 此外，你可以通过sudo systemctl stop|status|restart xrdp 来停止|查看状态|重启 xrdp服务 修改xrdp配置 12345vi /etc/xrdp/xrdp.ini; set SSL protocols; can be comma separated list of 'SSLv3', 'TLSv1', 'TLSv1.1', 'TLSv1.2', 'TLSv1.3'ssl_protocols=TLSv1, TLSv1.1, TLSv1.2 重启xrdp服务 1sudo systemctl restart xrdp 现在可以通过微软的mstsc连接了 1234su ktouch ~/.Xclientsecho &quot;xfce4-session&quot; &gt; ~/.Xclientschmod +x ~/.Xclients 如果不行的话，放行selinux 12chcon -t bin_t /usr/sbin/xrdpchcon -t bin_t /usr/sbin/xrdp-sesman 如果还是不行 12vi /etc/selinux/configSELINUX=disabled 安装宝塔1 安装SMB12345yum install sambasystemctl start|stop|status|restart smbfirewall-cmd --add-service samba --permanentfirewall-cmd --reload KMS服务器12345cd /opt在宝塔上传kmspro.sh到/optchmod +x kmspro.sh &amp;&amp; bash kmspro.sh centosbash kmspro.sh start|restart|status|uninstallbash kmspro.sh auto 安装百度网盘安装依赖文件 1yum install libXScrnSaver xdg-utils 安装百度网盘 1rpm -i http://wppkg.baidupcs.com/issue/netdisk/Linuxguanjia/3.3.2/baidunetdisk-3.3.2.x86_64.rpm 在宝塔中找到文件夹/usr/lib64并删除libstdc++.so.6 123yum provides libstdc++.so.6cd /usr/lib64ln libstdc++.so.6.0.20 libstdc++.so.6 安装新硬盘1234567891011121314fdisk -lparted /dev/sdcprintmklabel gptmkpart extended 0% 100%printquitmount /dev/sdc1 /文件夹位置umount /dev/sdc1pvcreate /dev/sdc1vgextend centos /dev/sdc1pvscanmkfs.xfs -f /dev/sdc1 双网卡链路聚合12345678910su rootnmcli connection add type team con-name team0 ifname team0 config '{&quot;runner&quot;:{&quot;name&quot;:&quot;activebackup&quot;}}'nmcli connection modify team0 team.config '{&quot;runner&quot;:{&quot;name&quot;:&quot;loadbalance&quot;}}'nmcli connection modify team0 team.config '{&quot;runner&quot;:{&quot;name&quot;:&quot;activebackup&quot;}}'nmcli connection add type team-slave con-name team0-1 ifname enp2s0 master team0nmcli connection add type team-slave con-name team0-2 ifname enp3s0 master team0nmcli connection shownmcli connection up team0-1nmcli connection up team0-2nmcli connection modify team0 ipv4.addresses '192.168.2.233/24' 更换内核 1egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \\'","link":"/post/2020/ckiatgmnm0000tcxhalpm0rta/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/post/2020/ckiatgmnm0001tcxh160r72hd/"},{"title":"Git食用说明书","text":"零.写在前面本文操作环境：Windows 10 64位。这里也建议初学者先在Windows下食用本教程。 本文所有素材来自互联网，违侵删。 本文本来想标来源的，但是实在不知道从何下手，百度排名最高的链接指向微信公众号，微信公众号指向慕课网，慕课网的链接404，你告诉我怎么标出处？ 目前认为比较靠谱的出处：https://www.cnblogs.com/tugenhua0707/p/4050072.html 一. Git是什么？Git是目前世界上最先进的分布式版本控制系统。工作原理/流程： 名词释义：Workspace：工作区Index / Stage：暂存区Repository：仓库区（或本地仓库）Remote：远程仓库 二. SVN与Git的最主要的区别？ SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。 Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。 说人话：使用Git的每台电脑都可以查看在该台电脑的版本文件，也可以查看他人推送的版本，而SVN则把所有版本都放在中央服务器进行统一管理。 三.在windows上如何安装Git？考虑到Git连接速度过慢，这里放一个蓝奏云的链接，方便不方便不可描述的用户下载。 由于18年后的电脑基本都是8G以上内存了，默认安装的也是64位系统，所以这里就不放32位Git的安装包了，如果有需要的话，你可以在评论区留言，我会根据评论区的反馈更新资源。 从官网或者蓝奏云下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到”Git –&gt; Git Bash”，如下： 会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下： 安装完成后，还需要最后一步设置，在命令行输入如下：*注意：**Git*的bash命令开头$已预设，无需输入。 12$ git config --global user.name &quot;你的用户名&quot;$ git config --global user.email &quot;你的邮箱&quot; 因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。 注意：git config --global参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。 四：如何操作？1.创建版本库。什么是版本库？版本库又名仓库，英文名repository，你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。 所以创建一个版本库也非常简单，如下我是D盘–&gt; www下目录下新建一个testgit版本库。 pwd命令是用于显示当前的目录。 通过命令git init把这个目录变成git可以管理的仓库，如下： 这时候你当前testgit目录下会多了一个.git 的目录，这个目录是 Git 来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把 git 仓库给破坏了。如下： 把文件添加到版本库中。 首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如 txt 文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。 下面先看下demo如下演示： 我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111 第一步：使用命令git add readme.txt添加到暂存区里面去。如下： 如果和上面一样，没有任何提示，说明已经添加成功了。 第二步：用命令git commit告诉Git，把文件提交到仓库。 现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下： 说明没有任何文件未提交，但是我现在继续来改下 readme.txt 内容，比如我在下面添加一行2222222222内容，继续使用git status来查看下结果，如下： 上面的命令告诉我们 readme.txt 文件已被修改，但是未被提交的修改。 接下来我想看下 readme.txt 文件到底改了什么内容，如何查看呢？可以使用如下命令： git diff readme.txt如下： 如上可以看到，readme.txt 文件内容从一行11111111改成二行添加了一行22222222内容。 知道了对 readme.txt 文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add第二步是：git commit)。 如下： 2.版本回退：如上，我们已经学会了修改文件，现在我继续对 readme.txt 文件进行修改，再增加一行 内容为33333333333333.继续执行命令如下： 现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令git log演示如下所示： git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是，增加内容为333333.上一次是添加内容222222，第一次默认是111111.如果嫌上面显示的信息太多的话，我们可以使用命令git log –pretty=oneline演示如下： 现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset --hard HEAD^那么如果要回退到上上个版本只需把 HEAD^改成 HEAD^^以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset --hard HEAD~100即可。未回退之前的 readme.txt 内容如下： 如果想回退到上一个版本的命令如下操作： 再来查看下 readme.txt 内容如下：通过命令cat readme.txt查看 可以看到，内容已经回退到上一个版本了。我们可以继续使用git log来查看下历史记录信息，如下： 我们看到增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下： git reset --hard &lt;版本号&gt; ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog 演示如下： 通过上面的显示我们可以知道，增加内容3333的版本号是6fcfc89.我们现在可以命令 git reset --hard 6fcfc89来恢复了。演示如下： 可以看到目前已经是最新的版本了。 3.理解工作区与暂存区的区别？工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。版本库(Repository)：工作区有一个隐藏目录.git，这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master，以及指向master的一个指针HEAD。 我们前面说过使用Git提交文件到版本库有两步： 第一步：是使用git add把文件添加进去，实际上就是把文件添加到暂存区。 第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。 我们继续使用 demo 来演示下： 我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为 test.txt 内容为test，我们先用命令git status来查看下状态，如下： 现在我们先使用git add命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下： 接着我们可以使用git commit一次性提交到分支上，如下： 4. Git撤销修改和删除文件操作4.1 撤销修改比如我现在在 readme.txt 文件里面增加一行内容为555555555555，我们先通过命令查看如下： 在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改： 第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。 第二：我可以按以前的方法直接恢复到上一个版本。使用git reset --hard HEAD^ 但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用git status查看下当前的状态。如下所示： 可以发现，Git会告诉你，git checkout -- file可以丢弃工作区的修改，如下命令：git checkout -- readme.txt，如下所示： 命令git checkout --readme.txt意思就是，把 readme.txt 文件在工作区做的修改全部撤销，这里有2种情况，如下： readme.txt 自动修改后，还没有放到暂存区，使用撤销修改就回到和版本库一模一样的状态。 另外一种是 readme.txt 已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。 对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行内容为6666666666666，我git add 增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示： 注意：命令git checkout – readme.txt 中的–很重要，如果没有–的话，那么命令变成创建分支了。 4.2 删除文件假如我现在版本库 testgit 目录添加一个文件b.txt，然后提交。如下： 如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上 rm 命令：rm b.txt，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令提交掉，现在目录是这样的， 只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？ 可以使用如下命令git checkout -- b.txt，如下所示： 再来看看我们 testgit 目录，添加了3个文件了。如下所示： 4.5 Git checkout =&gt;Git Restore使用 Git 进行版本管理时，遇到的回退情况远不止这么多，这只是我目前常见的，之后遇到还会补充，每种情况我们其实不止有一种解决方式，接下来对于每种情况给一个我个人常用的处理方式，因为 git checkout 的作用被逐渐拆分成更具体的 git switch 和 git restore，我们尽量选择功能明确的命令： 还原00：工作区中未加到暂存区和版本库的文件，还原今天所做的修改尝试下Ctrl+z吧，不行就找找自动保存的缓存文件，看看能不能找到之前版本 还原01：工作区中未加到暂存区和版本库的文件，执行了 git add 操作直接使用 git restore --staged file_name 命令，如果版本不支持则使用 git rm --cached file_name 还原02：版本库中的文件，修改或删除后未执行 git add 操作直接使用 git restore file_name 命令，如果版本不支持则使用 git checkout -- file_name 还原03：版本库中的文件，修改或删除后执行了 git add 操作直接使用 git restore --staged file_name 命令，按 &lt;还原02&gt; 情况处理 还原04：版本库中的文件，修改或删除后执行了 git add、git commit 操作直接使用 git reset HEAD^ 命令，按 &lt;还原02&gt; 情况处理，或者使用 git reset --soft HEAD^ 命令，按 &lt;还原03&gt; 情况处理. 还原05：版本库中的文件，修改或删除后执行了 git add、git commit、git push 操作先按照 &lt;还原04&gt; 情况处理，然后使用 git push -f 命令 还原06：两次git commit 之后产生两条日志，只还原第一次提交使用 git revert HEAD^ 命令，解决冲突后提交，revert 后面跟具体的 commit id 也可以。 5. 远程仓库在了解之前，先注册 github 账号，由于你的本地Git仓库和 github 仓库之间的传输是通过SSH加密的，所以需要一点设置：第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令： ssh-keygen -t rsa –C “youremail@example.com”，由于我本地此前运行过一次，所以本地有，如下所示： id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。 第二步：登录 github，打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”，填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。 点击 Add Key，你就应该可以看到已经添加的key。 如何添加远程库？现在的情景是：我们已经在本地创建了一个Git仓库后，又想在 github 创建一个Git仓库，并且希望这两个仓库进行远程同步，这样 Github 的仓库可以作为备份，又可以其他人通过该仓库来协作。 首先，登录 github 上，然后在右上角找到“create a new repo”创建一个新的仓库。如下： 在 Repository name 填入 testgit ，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库： 目前，在 Github 上的这个 testgit 仓库还是空的，GitHub 告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到 GitHub 仓库。 现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令： 1$ git remote add origin https://github.com/tugenhua0707/testgit.git 所有的如下： 把本地库的内容推送到远程，使用git push命令，实际上是把当前分支 master 推送到远程。 由于远程库是空的，我们第一次推送 master 分支时，加上了–u参数，Git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在 github 页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示： 从现在起，只要本地作了提交，就可以通过如下命令： 1$ git push origin master 把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。 如何从远程库克隆？ 上面我们了解了先有本地库，后有远程库时候，如何关联远程库。 现在我们想，假如远程库有新的内容了，我想克隆到本地来如何克隆呢？ 首先，登录github，创建一个新的仓库，名字叫testgit2.如下： 如下，我们看到： 现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示： 接着在我本地目录下生成testgit2目录了，如下所示： 6. 创建与合并分支在版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。 首先，我们来创建dev分支，然后切换到dev分支上。如下操作： git checkout 命令加上–b参数表示创建并切换，相当于如下2条命令 12$ git branch dev$ git checkout dev git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行7777777777777 首先我们先来查看下readme.txt内容，接着添加内容77777777，如下： 现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下： 现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 git merge dev 如下所示： git merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。 注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。 合并完成后，我们可以接着删除dev分支了，操作如下： 总结创建与合并分支命令如下： 查看分支：git branch 创建分支：git branch name 切换分支：git checkout name 创建+切换分支：git checkout –b name 合并某分支到当前分支：git merge name 删除分支：git branch –d name 如何解决冲突？下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下所示： 同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为99999999，如下所示： 现在我们需要在master分支上来合并fenzhi1，如下操作： Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，其中&lt;&lt;&lt;HEAD是指主分支修改的内容，&gt;&gt;&gt;&gt;&gt;fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存： 如果我想查看分支合并的情况的话，需要使用命令 git log.命令行演示如下： 3.分支管理策略。 通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数–no-ff来禁用”Fast forward”模式。首先我们来做demo演示下： 123456$ git checkout -b dev # 创建一个dev分支。$ git add readme.txt # 修改readme.txt内容。$ git commit -m &quot;add merge&quot; # 添加到暂存区。$ git checkout master # 切换回主分支(master)。$ git merge --no-ff -m &quot;merge with no-ff&quot; # 合并dev分支，使用git merge –no-ff -m &quot;注释&quot; dev# 查看历史记录；截图如下： 分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。 7. bug分支在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。 比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。比如如下： 并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场”隐藏起来”，等以后恢复现场后继续工作。如下： 所以现在我可以通过创建issue-404分支来修复bug了。 首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，演示如下： 修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下： 现在，我们回到dev分支上干活了。 工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令 git stash list来查看下。如下： 工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法： 1.git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。2.另一种方式是使用git stash pop，恢复的同时把stash内容也删除了。演示如下 8. 多人协作当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。 要查看远程库的信息使用 git remote要查看远程库的详细信息使用 git remote –v如下演示： 8.1 推送分支推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上： 使用命令 git push origin master 比如我现在的github上的readme.txt代码如下： 本地的readme.txt代码如下： 现在我想把本地更新的readme.txt代码推送到远程库中，使用命令如下： 我们可以看到如上，推送成功，我们可以继续来截图github上的readme.txt内容如下： 可以看到推送成功了，如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev 那么一般情况下，那些分支要推送呢？ master分支是主分支，因此要时刻与远程同步。一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。 8.2 抓取分支多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2 但是我首先要把dev分支也要推送到远程去，如下 接着进入testgit2目录，进行克隆远程的库到本地来，如下： 现在目录下生成有如下所示： 现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git checkout –b dev origin/dev 现在小伙伴们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库时如下： 小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改，也试图推送到远程库时，如下： 由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。 git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：如下： 这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：我们可以先来看看readme.txt内容了。 现在手动已经解决完了，我接在需要再提交，再push到远程库里面去。如下所示： 因此：多人协作工作模式一般是这样的： 首先，可以试图用git push origin branch-name推送自己的修改.如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。 来源：阮一峰博客 五：代码整理1. 新建代码库在当前目录新建一个Git代码库 1$ git init 新建一个目录，将其初始化为Git代码库 12$ git init [project-name]#下载一个项目和它的整个代码历史$ git clone [url] 2. 配置显示当前的Git配置 1$ git config --list 编辑Git配置文件 123$ git config -e [--global]#设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot; 3. 增加/删除文件添加指定文件到暂存区 1234$ git add [file1][file2]...#添加指定目录到暂存区，包括子目录$ git add [dir]#添加当前目录的所有文件到暂存区$ git add .#添加每个变化前，都会要求确认#对于同一个文件的多处变化，可以实现分次提交$ git add -p 删除工作区文件，并且将这次删除放入暂存区 123$ git rm [file1][file2]...#停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]#改名文件，并且将这个改名放入暂存区$ git mv [file-original][file-renamed] 4.代码提交提交暂存区到仓库区 123$ git commit -m [message]#提交暂存区的指定文件到仓库区$ git commit [file1][file2]...-m [message]#提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a 提交时显示所有diff信息 1$ git commit -v 使用一次新的commit，替代上一次提交#如果代码没有任何新变化，则用来改写上一次commit的提交信息 12$ git commit --amend -m [message]#重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1][file2]... 5.分支列出所有本地分支 1$ git branch 列出所有远程分支 1$ git branch -r 列出所有本地分支和远程分支 1$ git branch -a 新建一个分支，但依然停留在当前分支 123456789101112$ git branch [branch-name]#新建一个分支，并切换到该分支$ git checkout -b [branch]#新建一个分支，指向指定commit$ git branch [branch][commit]#新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch][remote-branch]#切换到指定分支，并更新工作区$ git checkout [branch-name]#切换到上一个分支$ git checkout -#建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch][remote-branch]#合并指定分支到当前分支$ git merge [branch]#选择一个commit，合并进当前分支$ git cherry-pick [commit]#删除分支$ git branch -d [branch-name]#删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch] 6.标签列出所有tag 1$ git tag 新建一个tag在当前commit 1234567$ git tag [tag]#新建一个tag在指定commit$ git tag [tag][commit]#删除本地tag$ git tag -d [tag]#删除远程tag$ git push origin :refs/tags/[tagName]#查看tag信息$ git show [tag]#提交指定tag$ git push [remote][tag]#提交所有tag$ git push [remote]--tags 新建一个分支，指向某个tag 1$ git checkout -b [branch][tag] 7.查看信息显示有变更的文件 1$ git status 显示当前分支的版本历史 1$ git log 显示commit历史，以及每次commit发生变更的文件 1$ git log --stat 搜索提交历史，根据关键词 12$ git log -S [keyword]#显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s 显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件 1$ git log [tag] HEAD --grep feature 显示某个文件的版本历史，包括文件改名 1234$ git log --follow [file]$ git whatchanged [file]#显示指定文件相关的每一次diff$ git log -p [file]#显示过去5次提交$ git log -5 --pretty --oneline 显示所有提交过的用户，按提交次数排序 1$ git shortlog -sn #显示指定文件是什么人在什么时间修改过 12$ git blame [file]#显示暂存区和工作区的差异$ git diff #显示暂存区和上一个commit的差异 12$ git diff --cached [file]#显示工作区与当前分支最新commit之间的差异$ git diff HEAD #显示两次提交之间的差异 123456$ git diff [first-branch]...[second-branch]#显示今天你写了多少行代码$ git diff --shortstat &quot;@{0 day ago}&quot;#显示某次提交的元数据和内容变化$ git show [commit]#显示某次提交发生变化的文件$ git show --name-only [commit]#显示某次提交时，某个文件的内容$ git show [commit]:[filename]#显示当前分支的最近几次提交$ git reflog 8.远程同步下载远程仓库的所有变动 12$ git fetch [remote]#显示所有远程仓库$ git remote -v 显示某个远程仓库的信息 12345$ git remote show [remote]#增加一个新的远程仓库，并命名$ git remote add [shortname][url]#取回远程仓库的变化，并与本地分支合并$ git pull [remote][branch]#上传本地指定分支到远程仓库$ git push [remote][branch]#强行推送当前分支到远程仓库，即使有冲突$ git push [remote]--force 推送所有分支到远程仓库 1$ git push [remote]--all 9.撤销恢复暂存区的指定文件到工作区 12345$ git checkout [file]#恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit][file]#恢复暂存区的所有文件到工作区$ git checkout .#重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]#重置暂存区与工作区，与上一次commit保持一致$ git reset --hard 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 123456$ git reset [commit]#重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]#重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]#新建一个commit，用来撤销指定commit 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]#暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop 六. 总结Git 使用流程大概是新建代码库、配置、添加文件、提交！ 一、新建 123$ git init$ git init [project-name]$ git clone [url] 二、配置 1234$ git config --list$ git config -e [--global]$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot; 三、添加文件 1234567$ git add [file1] [file2] ...$ git add [dir]$ git add .$ git add -p$ git rm [file1] [file2] ...$ git rm --cached [file]$ git mv [file-original] [file-renamed] 四、提交 123456$ git commit -m [message]$ git commit [file1] [file2] ... -m [message]$ git commit -a$ git commit -v$ git commit --amend -m [message]$ git commit --amend [file1] [file2] ... 五、回滚 12345678$ git reset [file]$ git reset --hard$ git reset [commit]$ git reset --hard [commit]$ git reset --keep [commit]$ git revert [commit]$ git stash$ git stash pop 以上为常用到的命令，对于新手来说 123456789$ git init$ git config [--global] user.name &quot;[name]&quot; $ git config [--global] user.email &quot;[email address]&quot;$ git remote add master https://git.xxx.com/xx.git$ vim READ.ME......$ git add .$ git commit -a -m '第一次提交！'$ git push remote master 就能上手 Git！ 此外，练习下图可以帮助你理解","link":"/post/2020/Git/"},{"title":"icarus官方文档译本","text":"Icarus快速上手作为静态网站生成器Hexo的一款主题，Icarus以简洁、现代和精美为设计理念。在灵活且强大的配置系统的助力下，用户可以自由实现单栏与 多栏的灵活页面布局。同时，Icarus提供了丰富的插件与挂件供用户选择，让网站的个性化配置变得触手可及。此外，得力于全新设计的API， 开发者可以更便捷地对Icarus进行深层定制。 Icarus的安装非常简单，您只需从GitHub的仓库中下载Icarus源码并解压到博客的主题目录下的themes/icarus目录中。 您也可以使用如下命令将此主题下载到博客中： 1$ git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus -b &lt;version number&gt; --depth 1 您可以省略-b 来下载Icarus的最新开发版本。如果你想同时下载Git仓库的完整修改历史，请同时省略--depth 1。 另外，您也可以将Icarus作为Git子模块(submodule)安装到您的博客中： 1$ git submodule add https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 接下来，请将博客根目录下的_config.yml中的主题设置改为icarus： 123_config.ymltheme: icarus 或使用hexo命令修改主题设置: 1$ hexo config theme icarus 最后，请使用如下命令来启动Hexo本地测试服务器。 1$ hexo s 您可以继续阅读Icarus用户指南系列文章来了解Icarus的使用与配置。 同时，您可以从Icarus的site分支上获取本网站的源码供您参考。 额外资源下面的一些资源可以帮助你进一步个性化你的站点。 你也可以点击此处来提交你的Icarus个性化配置教程。Hexo中文文档 博客源码分享 by 辣椒の酱 hexo-theme-icarus 3 食用经验分享 by iMaeGoo 活用 Bulma 美化 Icarus 文章 by iMaeGoo Icarus用户指南 - 主题配置Icarus的默认主题配置文件_config.yml存放在themes/icarus目录下。 此文件不仅定义了站点全局的布局与样式设置，同时也包含了例如评论系统和挂件等其他组件的配置。 本文将介绍Icarus的主题配置机制，并且简述部分常用配置的格式与含义。 配置文件生成与校验Icarus的主题配置文件由YAML语言实现。 当你使用Hexo来处理主题文件而你的主题目录下没有默认配置文件themes/icarus/_config.yml时，Icarus会通过一系列JSON Schema文件来自动生成默认的 配置文件。 所以正常情况下你的主题目录下没有示例配置文件(_config.yml.example)并且也没有必要去手动创建_config.yml文件。 大多数的JSON Schema定义存放在themes/icarus/include/schema目录下，其他的定义则存放在ppoffice/hexo-component-inferno 仓库中。 你可以在运行hexo命令时附上--icarus-dont-generate-config来避免配置文件的自动生成。 当你每次在你的站点目录下运行hexo命令时，主题同时也会对比JSON Schema来校验你的配置文件是否正确。 如果校验中出现任何错误，Icarus会将错误位置与错误类型打印在屏幕上。 例如，如下的错误信息提醒我们logo配置项应该为字符串或是对象，而不是一个整型数。 你可以通过在hexo命令后附上--icarus-dont-check-config来跳过校验，但并不推荐这么做。 1234567891011121314INFO === Checking package dependencies ===INFO === Checking the configuration file ===WARN Configuration file failed one or more checks.WARN Icarus may still run, but you will encounter unexcepted results.WARN Here is some information for you to correct the configuration file.WARN [ { keyword: 'type', dataPath: '.logo', schemaPath: '#/properties/logo/type', params: { type: 'string,object' }, message: 'should be string,object' }] 另外，Icarus会尝试运行迁移脚本将你的配置升级到最新版本。 这些脚本存放在themes/icarus/include/migration目录。 你可以在hexo命令后附上--icarus-dont-upgrade-config来禁止配置升级。 最后，Icarus会检查主题所依赖的Node.js库是否安装并提醒你安装缺失的组件。 额外的配置文件与优先级除了在themes/icarus/_config.yml的默认主题配置文件外，Icarus也会从如下位置读取配置： themes/icarus/_config.post.yml和themes/icarus/_config.page.yml 文章/页面的front-matter 根目录下的站点配置文件_config.yml _config.post.yml和_config.page.yml配置文件与默认配置文件的格式和定义相同。 你可以在_config.post.yml中设置仅对文章页面生效的配置，而这些配置将覆盖默认配置文件中的同名配置。 例如，你可以在此配置文件中把所有的挂件放置在页面左侧，从而将所有的文章页面设置为两栏布局，同时其他页面仍保持三栏布局： 12345678910111213141516171819202122widgets: - type: recent_posts position: left - type: categories position: right - type: tags position: rightthemes/icarus/_config.post.ymlwidgets: - type: recent_posts position: left - type: categories position: left - type: tags position: left 类似的，_config.page.yml中的配置也覆盖默认配置文件中的配置，并仅对所有Hexo页面(pages)生效。 此外，如果你想要在某个文章/页面中覆盖默认配置，你可以把这些配置放在那个文章/页面的front-matter(头部)。 例如，如果你想在某篇文章中更换代码高亮主题，你可以像下面这样把配置卸载文章的front-matter中： 1234567title: 我的第一篇文章date: '2015-01-01 00:00:01'article: highlight: theme: atom-one-dark---# 文章标题 上面文章头部中的配置总会覆盖掉_config.post.yml和_config.yml文件中的同名配置。 在自定义页面或者优化访客的页面访问体验时，这个功能会十分有用。 比如，你可以为某篇文章设置更快的CDN，或者根据访客的国家或语言开启本地化的评论服务。 然而需要注意的是，一些Hexo定义的文章或页面属性不会复写掉其他配置文件中的同名配置，例如： title date updated comments (not comment) layout source photos excerpt 最后，站点根目录下的配置文件_config.yml可以被其他所有配置文件中的主题使用到的配置项所覆盖。 例如，themes/icarus/_config.yml中的title设置会覆盖掉_config.yml中的title，但new_post_name却不会，因为 Icarus没有用到这个配置项。 总而言之，配置文件的范围和覆盖优先级如下 某个文章/页面 front-matter可以覆盖themes/icarus/_config.post.yml或themes/icarus/_config.page.yml可以覆盖themes/icarus/_config.yml可以覆盖_config.yml 所有文章/页面 themes/icarus/_config.post.yml或themes/icarus/_config.page.yml可以覆盖themes/icarus/_config.yml可以覆盖_config.yml 所有HTML页面 themes/icarus/_config.yml可以覆盖_config.yml 主题配置项概览配置文件版本123themes/icarus/_config.ymlversion: 3.0.0 这个版本号与主题版本号相关却不总是相同。 当Icarus通过迁移脚本升级配置文件时，这个版本号会被用到。 请不要自己更改这个版本号。 主题变体123themes/icarus/_config.ymlvariant: default 为Icarus更换”皮肤“。 此配置目前支持”default“和”cyberpunk“两种值。 你可以在此处查看Cyberpunk变体的效果。 Logo123themes/icarus/_config.ymllogo: /img/logo.svg 此项配置设置了页面导航栏和尾部展示的logo图片。 logo配置的值既可以时你的logo图片的路径或URL地址，也可以时如下这种文字形式的logo 1234themes/icarus/_config.ymllogo: text: My Beautiful Site Favicon1234themes/icarus/_config.ymlhead: favicon: /img/favicon.svg 你可以在head中的favicon配置中设置你的网站的favicon图标的路径或URL地址。 Open Graph1themes/icarus/_config.yml 你可以在head部分配置Open Graph。 一些配置项应在主题配置文件中留空并在需要时在文章的front-matter中设置它们。 请参考Hexo文档来了解每个配置项的详细含义。 Google Structured Data1themes/icarus/_config.yml 你可以在head部分配置Google Structured Data。 大部分配置项应在主题配置文件中留空并在需要时在文章的front-matter中设置它们。 请参考Search for Developers来了解每个配置项的详细含义。 页面Metadata123456themes/icarus/_config.ymlhead: meta: - 'name=theme-color;content=#123456' - 'name=generator;content=&quot;Hexo 4.2.0&quot;' 你可以通过head部分的meta设置来向页面中添加``标签。 每一个meta标签应作为meta数组中的一个元素。 标签的属性应按照&lt;属性名&gt;=&lt;属性值&gt;的格式出现并用;隔开。 RSS1234themes/icarus/_config.ymlhead: rss: /path/to/atom.xml 你可以通过此设置在页面头部添加RSS链接信息。 导航栏12345678910111213141516themes/icarus/_config.ymlnavbar: # 导航栏菜单项 menu: Home: / Archives: /archives Categories: /categories Tags: /tags About: /about # 导航栏右侧的链接 links: GitHub: 'https://github.com' Download on GitHub: icon: fab fa-github url: 'https://github.com/ppoffice/hexo-theme-icarus' navbar部分定义了导航栏中出现的链接。 你可以通过向menu配置项中添加&lt;链接名&gt;: &lt;链接URL&gt;的方式添加任意导航栏菜单链接。 如果你希望向导航栏右侧添加链接，请向links配置项中添加&lt;链接名&gt;: &lt;链接URL&gt;。 你甚至可以使用FontAwesome图标来替换掉纯文字链接，格式如下： 12345链接格式&lt;链接名&gt;: icon: &lt;FontAwesome图标的class名&gt; url: &lt;链接URL&gt; 页面尾部12345678910111213themes/icarus/_config.ymlfooter: links: Creative Commons: icon: fab fa-creative-commons url: 'https://creativecommons.org/' Attribution 4.0 International: icon: fab fa-creative-commons-by url: 'https://creativecommons.org/licenses/by/4.0/' Download on GitHub: icon: fab fa-github url: 'https://github.com/ppoffice/hexo-theme-icarus' 你可以通过向footer中的links配置项中添加添加任意链接。 链接的格式与navbar的links配置项相同。 代码高亮1234567891011themes/icarus/_config.ymlarticle: highlight: # 代码高亮主题 # https://github.com/highlightjs/highlight.js/tree/master/src/styles theme: atom-one-light # 显示复制代码按钮 clipboard: true # 代码块的默认折叠状态。可以是&quot;&quot;, &quot;folded&quot;, &quot;unfolded&quot; fold: unfolded 如果你已在Hexo中启用了代码高亮功能，那么你可以通过article中的highlight设置来自定义代码块。 请从highlight.js/src/styles目录下选择一个高亮主题， 然后将不带.css后缀的文件名设置到theme配置项中。 你亦可以将clipboard设置为true或false来显示或隐藏复制代码按钮。 最后，如果你希望默认折叠或展开所有代码块，请将fold设置为folded或unfolded。 你也可以将其设置为空来禁止代码块折叠。 另外，你可以使用下面的语法来折叠单独的代码块： 123{% codeblock &quot;可选文件名&quot; lang:代码语言 &gt;folded %}...代码块内容...{% endcodeblock %} 缩略图为文章设置缩略图仅需两步。 第一步，确保主题配置文件中缩略图功能已启用： 1234themes/icarus/_config.ymlarticle: thumbnail: true 第二步，在文章的front-matter中设置缩略图的路径或URL地址： 123456post.mdtitle: Icarus快速上手thumbnail: /gallery/thumbnails/desert.jpg---文章内容... 文章头部的图片路径应为图片的绝对路径或URL地址，或图片相对于你网站的source目录的相对地址。 例如，如果你想使用/source/gallery/image.jpg作为缩略图，你需要在front-matter中使用/gallery/image.jpg作为图片地址。 文章阅读时间1234themes/icarus/_config.ymlarticle: readtime: true 你可以将article部分的readtime设置为true来显示文章字数以及预计阅读时间。 侧边栏1234567themes/icarus/_config.ymlsidebar: left: sticky: false right: sticky: true 你设置sidebar中的sticky设置项为true来让边栏的位置固定而不跟随页面滚动。 其他配置项如果你对第三方的插件，挂件，以及CDN提供商的配置感兴趣的话，请参考Icarus用户指南系列文章。 Icarus用户指南 - 挂件本文介绍Icarus 3支持的一些页面挂件的安装配置。若需同时展示多个挂件，只需在主题配置的widgets数组中添加多个挂件配置，而他们的展示顺序以配置的定义顺序为准。而每项挂件均包含必填项type(挂件类型)与position(挂件展示位置：左边/右边)。例如 123456789widgets: - type: ... # 挂件1 position: left ... - type: ... # 挂件2 position: right ... Icarus的绝大部分挂件由ppoffice/hexo-component-inferno 提供，具体提供的挂件种类与配置以其为准。 作者资料卡你可以启用作者资料卡挂件来展示文章作者/网站站长的信息。资料卡的示例配置如下所示： 123456789101112131415161718192021222324widgets: - position: right type: profile # 作者名称 author: hulatocat # 作者头衔 author_title: A GitHub Octocat # 作者所在地/公司 location: GitHub Inc. # 头像图片地址 avatar: https://octodex.github.com/images/hula_loop_octodex03.gif # 是否显示圆形头像 avatar_rounded: false # Gravatar邮箱(如不设置`avatar`项) gravatar: # 关注按钮链接地址 follow_link: 'https://octodex.github.com/hulatocat' # 社交媒体链接 social_links: Github: icon: fab fa-github url: 'https://github.com/' Icarus: 'https://github.com/ppoffice/hexo-theme-icarus' 需要注意的是： 如果你希望使用Gravatar提供头像图片，请在gravatar项填入 你的Gravatar邮箱地址，而avatar一项请留空； social_links可以采用如下两种格式： 图标形式： 123&lt;链接名称&gt;: icon: &lt;FontAwesome5图标的HTML class名称&gt; url: &lt;链接的URL地址&gt; 文字形式： 1&lt;链接名称&gt;: &lt;链接的URL地址&gt; 文章目录若要展示文章目录，请首先在主题配置文件中添加如下挂件配置： 1234widgets: - type: toc position: left 然后，在需要开启目录的文章头部加入toc: true： 1234title: 一篇有目录的文章toc: true---文章内容... 友站链接你可以展示友站链接挂件展示相关网站以及它们的链接。友站链接挂件的配置如下所示： 12345678widgets: - position: left type: links # 友站名称与链接 links: Hexo: 'https://hexo.io' Bulma: 'https://bulma.io' 最新文章请通过如下挂件配置开启最新文章挂件： 1234widgets: - position: right type: recent_posts 文章归档请通过如下挂件配置开启文章归档挂件： 1234widgets: - position: right type: archives 文章分类请通过如下挂件配置开启文章分类挂件： 1234widgets: - position: right type: categories 文章标签请通过如下挂件配置开启文章标签挂件： 1234widgets: - position: right type: tags 邮件订阅Icarus的邮件订阅功能由Google Feedburner提供。 若要开启邮件订阅挂件，请首先使用诸如hexo-generator-feed 的Hexo插件生成网站的RSS源。 然后登录Google Feedburner并添加你的RSS源。完成配置后，请点击网页顶部的”我的源“ (My Feeds)查看源列表，并点击新添加的源进入源的配置界面。 点击”宣传“(Publicize)标签页，然后点击页面左侧的”邮件订阅“(Email Subscription)，然后在页面右侧找到并点击”激活“(Activate) 按钮。在打开的”邮件订阅“(Email Subscription)页面的HTML代码中找到 1https://feedburner.google.com/fb/a/mailverify?uri=****** 复制uri=后的ID，例如feedforall/ABCD并填入挂件配置的feedburner_id中。 1234567widgets: - position: left type: subscribe_email # (可选) 描述文字 description: 邮件订阅，更新早知道 feedburner_id: feedforall/ABCD Google AdSense请登录Google AdSense并新建广告，复制广告代码中的data-ad-client和data-ad-slot 分别填入到挂件配置的client_id和slot_id项中。示例如下： 123456widgets: - position: left type: adsense client_id: ca-pub-xxxxxxxx slot_id: xxxxxxx Icarus用户指南 - 站内搜索插件本文介绍Icarus 3支持的一些站内搜索插件的安装配置。 Icarus的站内搜索插件由ppoffice/hexo-component-inferno 提供，具体提供的插件种类与配置以其为准。 Algolia安装指南 在线预览 在Hexo站点的根目录安装hexo-algolia插件。 注册并登录Algolia。首次登录控制面板(Dashboard)时点击页面上的“创建索引”(Create Index)按钮并 输入任意索引名称(Index name)。最后点击“创建”(Create)完成索引创建。 下一步，点击右侧导航栏上的API Keys，复制页面上的“应用ID”(Application ID)和“仅限搜索的API Key”(Search-Only API Key)。打开 Hexo站点根目录下的站点配置文件_config.yml，填入上面复制的信息到hexo-algolia插件的配置中。 例如，对于下面的Algolia索引信息 12345Algolia索引信息Algolia索引名称: My-Hexo-SiteApplication ID: ABCDEFGHIJKLSearch-Only API Key: 7b08fca7d42412cee901a25643124221 对应的站点配置为 123456_config.ymlalgolia: applicationID: My-Hexo-Site indexName: ABCDEFGHIJKL apiKey: 7b08fca7d42412cee901a25643124221 回到Algolia控制面板的API Keys页面，切换到同一页面上的“所有API Keys”(All API Keys)标签页，点击“新建API Key”(New API Key)。 在弹出的“创建API Key”(Create API Key)对话框中选择“索引”(Indices)为上一步中创建的索引，“HTTP Referers”填入Hexo站点的 域名，“ACL”中填入addObject，deleteObject，listIndexes， deleteIndex四项。点击“创建”(Create)完成创建。 复制刚刚创建的API Key，例如727fbd8c998fe419318fa350db6793ca。 打开一个命令行终端(Windows命令行(CMD)或Linux/macOS终端)，切换当前目录到你的Hexo站点的根目录并设置hexo-algolia 插件上传网站索引用到的环境变量为上一步中创建的API Key。 Windows下 1234Windows命令行(CMD)C:\\Users\\you&gt; cd path/to/your/hexo/siteC:\\Users\\you&gt; set HEXO_ALGOLIA_INDEXING_KEY=&quot;727fbd8c998fe419318fa350db6793ca&quot; Linux/macOS下 1234Linux/macOS终端$ cd path/to/your/hexo/site$ export HEXO_ALGOLIA_INDEXING_KEY=&quot;727fbd8c998fe419318fa350db6793ca&quot; 然后运行下面的命令来清理并上传网站索引到Algolia 1234Windows命令行(CMD)或Linux/macOS终端$ hexo clean$ hexo algolia 最后，打开主题配置文件并设置搜索为Algolia 1234themes/icarus/_config.ymlsearch: type: algolia 百度搜索安装指南 打开主题配置文件并设置搜索为百度搜索 1234themes/icarus/_config.ymlsearch: type: baidu 谷歌自定义搜索安装指南 在线预览 登录谷歌并访问Google CSE来创建自定义搜索。在“需要搜索的站点”(Sites to Search) 中填入你的Hexo站点域名，“语言”(Language)选择需要的语言，并填写自定义“搜索引擎名称”(Name of the search engine)。点击“创建” (Create)。 然后，点击页面上的“添加到你的站点”(Add it to your site)右侧的“获取代码”(Get code)按钮，然后从HTML代码中复制cx的值填入到对应 主题配置项中。例如下面的HTML代码 1234Google CSE HTML代码&lt;script async src=&quot;https://cse.google.com/cse.js?cx=012345601234560123456:abcdefghijklmn&quot;&gt;&lt;/script&gt;&lt;div class=&quot;gcse-search&quot;&gt;&lt;/div&gt; 对应的主题配置为 12345themes/icarus/_config.ymlsearch: type: google_cse cx: 012345601234560123456:abcdefghijklmn Insight安装指南 Insight为本站默认的站内搜索引擎。你可以通过下面的主题配置设置搜索为Insight 1234themes/icarus/_config.ymlsearch: type: insight Icarus用户指南 - CDN提供商选择合适的CDN提供商可以大幅度减少网站访客的网页加载时间。 Icarus为你提供了多种内置的CDN提供商来加快主题所用到的前端资源的加载。 Icarus的CDN相关功能由ppoffice/hexo-component-inferno 提供，具体提供的CDN提供商种类与配置以其为准。 内置CDN提供商目前，Icarus提供如下几类内置的CDN服务提供商： JavaScript库CDN cdnjs.com (cdnjs) jsDelivr (jsdelivr) UNPKG (unpkg) loli.net (loli) 网络字体CDN Google Fonts (google) loli.net (loli) FontAwesome图标CDN FontAwesome 5 (fontawesome) loli.net (loli) 默认的CDN服务提供商配置为： 123456themes/icarus/_config.ymlproviders: cdn: jsdelivr fontcdn: google iconcdn: fontawesome 自定义CDN提供商除此之外，你还可以通过URL模板的方式使用自定义的CDN提供商。 每种类别提供商的模板格式如下文所示： JavaScript库CDN123CDN URL模板https://some.cdn.domain.name/${package}/${version}/${filename} 你需要将CDN URL中的包名称，版本号，和文件相对路径替换为${package}， ${version}，和${filename}占位符来获取 CDN的URL模板。 例如，如下JavaScript的在UNPKG CDN上的URL地址 123UNPKG CDN URL示例https://unpkg.com/d3@5.7.0/dist/d3.min.js 改写成的URL模板为 123UNPKG CDN URL模板https://unpkg.com/${package}@${version}/${filename} 一些CDN提供商可能采用不同的URL形式，而在这些CDN上包名称或文件相对路径与其他CDN会有所不同。 例如，moment.js库在CDN.js上有着如下的URL形式： 123CDN.js CDN URL示例https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.js 但在UNPKG上有着这样的URL形式 123UNPKG CDN URL示例https://unpkg.com/moment@2.22.2/min/moment.min.js 因此，你需要注意你的自定义CDN提供商的URL格式。 默认情况下，Icarus在URL模板中采用npm仓库的包名称和文件相对路径（例如moment@2.22.2/min/moment.min.js）。 jsDelivr和UNPKG就采用这种npm形式。 另外，如果你使用的CDN采用如CDN.js这样的URL形式，请在URL模板前加上[cdnjs]前缀。 123CDN.js-style URL模板[cdnjs]https://some.cdn.domain.name/${package}/${version}/${filename} 网络字体CDN你可以使用Google字体镜像CDN或是与其兼容的网络字体CDN。 Icarus依赖Ubuntu，Oxanium，和Source Code Pro这三种字体。 所以请确保你使用的CDN提供这些字体。 自定义的URL模板需包含字体类型type（图标icon或是字体font）和字体名称fontname两个占位符： 123Webfont CDN URL模板https://some.google.font.mirror/${type}?family=${fontname} FontAwesome图标CDN你可以使用自定义的FontAwesome CDN提供商。 URL模板中不需要包含占位符。 自定义提供商需要至少提供本主题所用到的所有FontAwesome 5图标。 123Icon Font CDN URL模板https://custom.fontawesome.mirror/some.stylesheet.css 以上自定义配置可以放到主题配置文件中的providers部分： 123456themes/icarus/_config.ymlproviders: cdn: 'https://some.cdn.domain.name/${package}/${version}/${filename}' fontcdn: 'https://some.google.font.mirror/${type}?family=${fontname}' iconcdn: 'https://custom.fontawesome.mirror/some.stylesheet.css' CDN工具函数本主题提供了三个工具函数来帮助主题开发者轻松引用第三方的前端资源。 详情请参见ppoffice/hexo-component-inferno. Icarus用户指南 - 分享按钮本文介绍Icarus 3支持的一些分享按钮的安装配置。 Icarus的分享按钮由ppoffice/hexo-component-inferno 提供，具体提供的按钮种类与配置以其为准。 AddThis此分享按钮可能会被部分广告拦截浏览器扩展拦截，请酌情使用。 安装指南 在线预览 注册AddThis。在首次注册时的“选择工具”(Select a Tool)页面选择“分享按钮”(Share Buttons)。 在“选择工具类型”(Select a Tool Type)界面选择分享按钮的展示样式，点击“继续”(Continue)。 在下一步的页面中按照需要进一步自定义分享按钮的样式与行为，完成时点击“激活工具”(Activate Tool)按钮。 在获取代码界面找到分享按钮的HTML代码，复制其中的src地址并填入相应的主题配置中，例如下面的AddThis代码 1234AddThis代码&lt;!-- Go to www.addthis.com/dashboard to customize your tools --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-xxxxxxxxxxxxx&quot;&gt;&lt;/script&gt; 对应的主题配置为 12345themes/icarus/_config.ymlshare: type: addthis install_url: //s7.addthis.com/js/300/addthis_widget.js#pubid=ra-xxxxxxxxxxxxx AddToAny安装指南 在线预览 无需注册步骤，直接修改主题配置来启用AddToAny： 1234themes/icarus/_config.ymlshare: type: addtoany (可选)若你需要对分享按钮进行进一步的个性化配置，请打开AddToAny官网，点击“获取分享按钮” (Get the Share Button)，然后选择“任意网站”(Any Website)。在页面中完成配置后点击“获取按钮代码”(Get Button Code)。 例如，下面是获得的默认代码： 1234567891011AddToAny代码&lt;!-- AddToAny BEGIN --&gt;&lt;div class=&quot;a2a_kit a2a_kit_size_32 a2a_default_style&quot;&gt;&lt;a class=&quot;a2a_dd&quot; href=&quot;https://www.addtoany.com/share&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_facebook&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_twitter&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_email&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;script async src=&quot;https://static.addtoany.com/menu/page.js&quot;&gt;&lt;/script&gt;&lt;!-- AddToAny END --&gt; 由于本Hexo主题的分享按钮由ppoffice/hexo-component-inferno 提供，若要对其中的分享按钮代码进行修改，需首先复制其中的文件到主题相应的目录下。例如，这里我们复制 src/view/share/addtoany.jsx到themes/icarus/layout/share/目录下。然后修改其中的require路径为正确的路径，并将上面的AddToAny的HTML代码替换 到文件的相应位置中即可。 1234567891011121314151617181920212223242526themes/icarus/layout/share/addtoany.jsxconst { Component, Fragment } = require('inferno');- const { cacheComponent } = require('../../util/cache');+ const { cacheComponent } = require('hexo-component-inferno/lib/util/cache');...中间省略部分代码...class AddToAny extends Component { render() { return &lt;Fragment&gt;- &lt;div class=&quot;a2a_kit a2a_kit_size_32 a2a_default_style&quot;&gt;- &lt;a class=&quot;a2a_dd&quot; href=&quot;https://www.addtoany.com/share&quot;&gt;&lt;/a&gt;- &lt;a class=&quot;a2a_button_facebook&quot;&gt;&lt;/a&gt;- &lt;a class=&quot;a2a_button_twitter&quot;&gt;&lt;/a&gt;- &lt;a class=&quot;a2a_button_telegram&quot;&gt;&lt;/a&gt;- &lt;a class=&quot;a2a_button_whatsapp&quot;&gt;&lt;/a&gt;- &lt;a class=&quot;a2a_button_reddit&quot;&gt;&lt;/a&gt;- &lt;/div&gt;+ 刚刚获取的AddToAny HTML代码替换到这里 &lt;script src=&quot;https://static.addtoany.com/menu/page.js&quot; defer={true}&gt;&lt;/script&gt; &lt;/Fragment&gt;; }}...下面省略部分代码... 百度分享此分享按钮可能会被部分广告拦截浏览器扩展拦截，请酌情使用。 百度分享按钮服务似乎已下线，建议使用其他分享按钮服务作为替代。 安装指南 在线预览 无需注册步骤，直接修改主题配置来启用百度分享： 1234themes/icarus/_config.ymlshare: type: bdshare Share.jsShare.js服务已停止维护，建议使用其他分享按钮服务作为替代。 安装指南 在线预览 无需注册步骤，直接修改主题配置来启用Share.js： 1234themes/icarus/_config.ymlshare: type: sharejs (可选)如果你需要自定义分享按钮，请参照AddToAny中的第二步与share.js主页 的相关信息。 ShareThis安装指南 在线预览 打开ShareThis官网，点击页面上的“从分享按钮开始”(Start with Share Buttons)按钮。 在“选择分享按钮类型”(Choose type of sharing button)选择需要的按钮类型，如有需要的话可点击下方的“自定义你的分享按钮” (Customize your share buttons)链接进行进一步配置。完成后点击“下一步”(Next)。 在“注册并获取代码”(Register and get the code!)界面点击HTML和“下一步”(Next)按钮。然后输入邮箱和密码完成ShareThis的注册。 最后，复制代码获取界面中的src地址并填入相应的主题配置中，例如下面的ShareThis代码 123AddThis代码&lt;script type=&quot;text/javascript&quot; src=&quot;https://platform-api.sharethis.com/js/sharethis.js#property=xxxxxxxxxxxxx&amp;product=inline-share-buttons&quot; async=&quot;async&quot;&gt;&lt;/script&gt; 对应的主题配置为 12345themes/icarus/_config.ymlshare: type: sharethis install_url: https://platform-api.sharethis.com/js/sharethis.js#property=xxxxxxxxxxxxx&amp;product=inline-share-buttons Icarus用户指南 - 赞赏按钮本文介绍Icarus 3支持的一些赞赏按钮的安装配置。若需同时展示多个按钮，只需在主题配置的donates数组中添加多个按钮配置，例如 123456789themes/icarus/_config.ymldonates: - type: ... # 按钮1 ... - type: ... # 按钮2 ... Icarus的赞赏按钮由ppoffice/hexo-component-inferno 提供，具体提供的按钮种类与配置以其为准。 支付宝安装指南 登录支付宝并导出个人支付二维码图片放置在网站的图片或附件文件夹下，或上传至图床，然后在主题配置中添加如下配置项： 1234567themes/icarus/_config.ymldonates: - type: alipay # 支付宝二维码图片地址 qrcode: /path/to/alipay/qrcode.png Buy me a Coffee安装指南 注册Buy me a Coffee并复制个人赞助页面的地址，填写到如下主题配置中： 1234567themes/icarus/_config.ymldonates: - type: buymeacoffee # 个人赞助页面的地址 url: /path/to/buymeacoffee/personal/page Paypal安装指南 注册并登录Paypal，点击此链接来创建Paypal捐赠按钮。 在选择按钮样式(Choose button style)页面正确填写“国家/地区”(Country/Region)，“语言”(Language)后，点击“继续”(Continue) 进入下一页面。 在添加机构详情(Add organization details)页面中，选择“使用账号ID”(Use account ID)或“使用Email地址”(Use email address) 作为唯一账号标识符。点击“继续”(Continue)进入下一页面。 在“设置捐赠数额”(Set donation amounts)页面选择你要“接收的货币种类”(Currency you’ll receive donations in)，捐赠数额选择 “任意数额”(Any amount)。此按钮暂不支持指定数额的捐赠选项。点击“结束并获取代码”(Finish and Get Code)按钮进入下一页面。 从页面上的“按钮HTML代码”(Button HTML)中复制business和currency_code两项的值并填写到主题配置中。例如，下方的Paypal按钮 代码 12345678Paypal按钮HTML代码&lt;form action=&quot;https://www.paypal.com/cgi-bin/webscr&quot; ...&gt;&lt;input type=&quot;hidden&quot; name=&quot;cmd&quot; value=&quot;_donations&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;business&quot; value=&quot;XXXXXXXXXXXXX&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;currency_code&quot; value=&quot;USD&quot; /&gt;...&lt;/form&gt; 对应的主题配置为 1234567themes/icarus/_config.ymldonates: - type: paypal business: XXXXXXXXXXXXX currency_code: USD Patreon安装指南 注册Patreon并复制个人赞助页面的地址，填写到如下主题配置中： 1234567themes/icarus/_config.ymldonate: - type: patreon # 个人赞助页面的地址 url: /path/to/patreon/personal/page 微信安装指南 登录微信并导出个人支付二维码图片放置在网站的图片或附件文件夹下，或上传至图床，然后在主题配置中添加如下配置项： 1234567themes/icarus/_config.ymldonates: - type: wechat # 微信二维码图片地址 qrcode: /path/to/wechat/qrcode.png Icarus用户指南 - 网站分析插件本文介绍Icarus 3支持的一些网站统计与分析插件的安装配置。 Icarus的网站统计与分析插件由ppoffice/hexo-component-inferno 提供，具体提供的插件种类与配置以其为准。 本文中涉及的所有插件均可能被部分广告拦截浏览器扩展拦截，请酌情使用。 百度统计安装指南 登录百度统计。在“网站列表”页面上点击“新增网站”按钮并填写你的Hexo站点的“网站域名”，“网站首页” 等信息，点击“确定”。 在跳转到的“代码获取”页面中找到hm.baidu.com/hm.js?后引号内的一串ID并填写到主题配置的plugins &gt; baidu_analytics &gt; tracking_id。例如如下的统计代码 1234567891011百度统计代码&lt;script&gt;var _hmt = _hmt || [];(function() {var hm = document.createElement(&quot;script&quot;);hm.src = &quot;https://hm.baidu.com/hm.js?3f06f2b732a5b1034c989f74e28d0eea&quot;;var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(hm, s);})();&lt;/script&gt; 对应的主题配置为 12345themes/icarus/_config.ymlplugins: baidu_analytics: tracking_id: 3f06f2b732a5b1034c989f74e28d0eea 不蒜子网页计数器安装指南 将主题配置中的plugins部分下的busuanzi设置为true即可开启不蒜子访客计数器，在网站页面的尾部和每篇博文的头部展示访问次数。 1234themes/icarus/_config.ymlplugins: busuanzi: true CNZZ统计安装指南 登录友盟+，在友盟+工作台首页点击“创建新应用” &gt; “Web应用”。然后输入“网站名称”，“网站域名”， “网站首页”等信息，并点击“确认添加站点”。 在跳转到的“统计代码“获取界面上找到”文字形式“的统计代码，并将其中id与web_id的值填写到主题配置的plugins &gt; cnzz &gt; id和web_id。例如如下的统计代码 123CNZZ统计代码&lt;script type=&quot;text/javascript&quot; src=&quot;https://s9.cnzz.com/z_stat.php?id=123456789000&amp;web_id=123456789000&quot;&gt;&lt;/script&gt; 对应的主题配置为 123456themes/icarus/_config.ymlplugins: cnzz: id: 123456789000 web_id: 123456789000 Google Analytics安装指南 登录Google Analytics。在进入用户主页后点击左侧导航栏下方的”管理“(Admin)进入管理界面。 在管理界面上点击”创建资产“(Create Property)按钮，选择测量的应用类型(What do you want to measure?)为Web并点击”继续“。 然后填写网站的名称(Website Name)，URL地址(Website URL)，分类(Industry Category)，以及报告时区(Reporting Time Zone)等信息。 点击”创建“(Create)。 在之后的”追踪代码“(Tracking Code)界面上找到”Tracking ID”的值，例如”UA-12345678-0”，填写到主题配置的plugins &gt; google_analytics &gt; tracking_id即可完成配置。 12345themes/icarus/_config.ymlplugins: google_analytics: tracking_id: UA-12345678-0 Hotjar安装指南 登录Hotjar，点击页面左上角的➕(加号)菜单中的”添加新站点“(Add new site)链接。 填写”网站地址“(WEBSITE)，”站点类型“(SITE TYPE)，和”站点所有者“(SITE OWNER)，然后点击”添加站点“(Add Site)按钮。 在跳转到的”站点&amp;组织“(Sites &amp; Organizations)页面找到新建的站点项，点击其右侧的”追踪代码“(Tracking Code)按钮并在弹出的 对话框中找到”Site ID”的值，例如”1234567”，填写到主题配置的plugins &gt; hotjar &gt; site_id即可完成配置。 12345themes/icarus/_config.ymlplugins: hotjar: site_id: 1234567 Icarus用户指南 - 用户评论插件本文介绍Icarus 3支持的一些用户评论插件的安装配置。 Icarus的用户评论插件由ppoffice/hexo-component-inferno 提供，具体提供的插件种类与配置以其为准。 畅言安装指南 首先，注册并登录畅言云评， 并按照PC端通用代码接入的帮助文档获取代码。 从获取的PC端代码中复制appid与conf值到Icarus主题配置文件的评论配置项中。 例如，获取到的如下的PC端代码： 123456789&lt;!--PC版--&gt;&lt;div id=&quot;SOHUCS&quot; sid=&quot;...&quot;&gt;&lt;/div&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://cy-cdn.kuaizhan.com/upload/changyan.js&quot; &gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;window.changyan.api.config({ appid: '????appid????', conf: 'prod_xxxxxxxxxxxxxxxxxxxxxxx'});&lt;/script&gt; 对应到主题配置文件中的配置项为： 123456themes/icarus/_config.ymlcomment: type: changyan app_id: ????appid???? conf: prod_xxxxxxxxxxxxxxxxxxxxxxx 另外，畅言云评要求站长对使用其评论服务的网站进行备案，详情请参阅 ICP备案文档。 Disqus安装指南 在线预览 首先，注册并登录Disqus，点击首页的“开始”(GET STARTED)按钮或者访问 此处并点击“我想要将Disqus安装到我的站点” (I want to install Disqus on my site)来创建新的站点评论服务。 在创建新站点页面中填写网站名称(Website Name)以及网站类型(Category)，然后点击“创建站点”(Create Site)。 下一步，选择Disqus的安装平台。此处选择最下方的“上面没有列出我使用的平台，使用通用代码安装” (I don’t see my platform listed, install manually with Universal Code)。 点击最下方的“配置”(Configure)按钮跳过通用代码安装指南(Universal Code install instructions)页面。 在“配置Disqus”(Configure Disqus)页面中按需填写Disqus个性化配置。点击“完成安装”(Complete Setup) 和“关闭配置”(Dismiss Setup)来结束配置。 最后，在评论站点首页的右上角点击“编辑配置”(Edit Settings)，进入到站点配置页面。 在页面上找到Shortname配置值并复制到主题配置文件相应的评论配置项中(comment下的shortname)。 例如，下图中的Shortname为test-usildmkxo General Settings - Disqus Admin 复制到配置文件中为 12345themes/icarus/_config.ymlcomment: type: disqus shortname: test-usildmkxo （可选）你可以在文章的头部加入disqusId来为文章添加Disqus唯一标识。这样如果文章之后被移动或者链接更改，其 评论也不会随之丢失。 1234567source/_post/some-post.mdtitle: My first postdate: 2015-01-01 00:00:01disqusId: some-disqus-id---# Hello world DisqusJSDisqusJS适用于原版Disqus服务访问受限的地区使用。关于DisqusJS的配置过程可参考 https://github.com/SukkaW/DisqusJS。 安装指南 在线预览 登录Disqus并打开此链接，点击“注册新应用”(Register new application)或者“注册应用”(registering an application)。 在打开的页面中填写应用名称(Label)，介绍(Description)，以及网站地址(Website)，然后点击“注册我的应用” (Register my application)。 应用创建完毕后进入设置界面(Settings)，在域名(Domains)输入框中填入你的网站域名，例如ppoffice.github.io。 点击页面下方的“保存设置”(Save Changes)按钮。 点击页面中上放的“详情”(Details)链接切换到当前应用的主页，从下方OAuth设置(OAuth Settings)中复制API Key 到相应的主题配置项(comment下的api_key)中。下面是示例配置： 12345678910themes/icarus/_config.ymlcomment: type: disqusjs shortname: test-usildmkxo api_key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxx api: https://disqus.skk.moe/disqus/ # 可选填 admin: ppoffice # 可选填 admin_label: Admin # 可选填 nesting: 4 # 可选填 关于上述配置的含义和可选值，请参考SukkaW/DisqusJS官方文档或 hexo-component-inferno中的配置项描述。 Facebook此评论插件可能会被部分广告拦截浏览器扩展拦截，请酌情使用。 安装指南 在线预览 Facebook的评论服务配置较为简单，仅需在主题配置中将comment的type设置为facebook即可。 1234themes/icarus/_config.ymlcomment: type: facebook Gitalk安装指南 在线预览 登录GitHub并点此注册一个新的OAuth应用。在填写相应的应用名称 (Application name)，应用主页(Homepage URL)，应用描述(Application description)后，在认证回调地址(Authorization callback URL)填写你的博客的根URL地址。 点击“注册应用”(Register application)后，在应用详情界面复制Client ID与Client Secret并填入主题配置的相应配置项中。 例如，对于下面的Client ID和Client Secret 123456GitHub OAuth ApplicationClient IDxxxxxxxxxxxxxxxxxxxxClient Secretxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Gitalk在Icarus的配置为 1234567891011121314151617themes/icarus/_config.ymlcomment: type: gitalk client_id: xxxxxxxxxxxxxxxxxxxx client_secret: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx repo: Some-of-Your-GitHub-Repo owner: you_github_name admin: - you_github_name per_page: 20 # 可选填 distraction_free_mode: false # 可选填 pager_direction: last # 可选填 create_issue_manually: false # 可选填 proxy: # 可选填 flip_move_options: # 可选填 enable_hotkey: true # 可选填 关于上述配置的含义和可选值，请参考Gitalk官方文档或hexo-component-inferno 中的配置项描述。 GitmentGitment项目似乎已停止维护，建议使用Gitalk或utterances作为基于GitHub Issues的评论系统的替代。 安装指南 参照上面Gitalk中关于注册GitHub OAuth应用的步骤注册应用，并将Client ID与Client Secret并填入主题配置的相应配置项中。 下面是Gitment的示例配置： 1234567891011themes/icarus/_config.ymlcomment: type: gitment owner: you_github_name repo: Some-of-Your-GitHub-Repo client_id: xxxxxxxxxxxxxxxxxxxx client_secret: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx theme: gitment.defaultTheme # 可选填 per_page: 20 # 可选填 max_comment_height: 250 # 可选填 关于上述配置的含义和可选值，请参考Gitment官方文档或hexo-component-inferno 中的配置项描述。 Isso如果你不希望以来第三方评论服务而自建评论系统的话，可考虑选用Isso。 当然，不同于第三方评论系统，你需要准备一个服务器用来运行Isso服务端程序。 安装指南 请参照Isso官方文档安装并启动Isso服务。 编辑主题配置文件并填入Isso服务的HTTP URL。例如，你的Isso服务地址为https://posativ.org/isso/api/， 则需在主题评论配置填写为： 12345themes/icarus/_config.ymlcomment: type: isso url: posativ.org/isso/api LiveRe此评论插件可能会被部分广告拦截浏览器扩展拦截，请酌情使用。 安装指南 在线预览 首先，注册并登录LiveRe。登录后，点击导航栏上的“安装”(Install)链接，进入安装界面。 在安装界面选择免费(City)选项下方的“现在安装”(Install Now)按钮。在获取LiveRe City代码(Get LiveRe City code)界面 填入站点地址(Site URL)，网站名称(Name of website)，和网站类别(Choose site category)，勾选“同意广告协议后”并点击 获取代码后，跳转到LiveRe代码页面。 复制代码中data-uid=&quot;...&quot;引号内的编号，填写到主题配置中的相应选项中。例如，下方的LiveRe代码 LiveRe - Install 对应的主题配置为 12345themes/icarus/_config.ymlcomment: type: livere uid: ABCD1234O0OxxxxXXXX000== Utterances安装指南 在线预览 准备一个公开的GitHub仓库(Repository)。 访问GitHub Apps - utterances页面来将utterances安装至准备好的仓库。 点击“配置”(Configure)按钮，在下一页面中选择需要安装utterances的用户。在安装页面，你可以选择将其安装到所有仓库(All repositories) 或是选定的一些仓库(Only select repositories)。点击“安装”(Install)。 若安装成功，网页跳转到utterances官网。之后可以阅读页面上的配置项的说明，并按照说明将对应配置值填入到 主题配置中。下方为示例配置： 123456789themes/icarus/_config.ymlcomment: type: utterances repo: Your-GitHub-Username/Your-Public-Repo-Name issue_term: pathname # 必填项，与issue_number二选一填写 issue_number: 100 # 必填项，与issue_term二选一填写，每篇文章对应一个issue，填写前需要手动创建issue label: some-issue-label # 可选填 theme: github-light # 可选填 Valine安装指南 在线预览 按照Valine官方的快速开始文档创建LeanCloud应用。 将App ID和App Key复制并填入主题配置的对应配置项中，并按照官方网站上的配置项 说明按需填写其他配置项。下面是示例配置： 12345678910111213141516themes/icarus/_config.ymlcomment: type: valine app_id: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx app_key: xxxxxxxxxxxxxxxxxxxxxx placeholder: &quot;&quot; # 可选填 notify: false # 可选填 verify: false # 可选填 avatar: # 可选填 avatar_force: false # 可选填 meta: [&quot;nick&quot;, &quot;mail&quot;, &quot;link&quot;] # 可选填 page_size: 10 # 可选填 visitor: false # 可选填 highlight: true # 可选填 record_ip: false # 可选填 Icarus用户指南 - 其他插件本文介绍Icarus 3支持的其他插件的安装配置。 部分下述插件由ppoffice/hexo-component-inferno 提供，它们的配置请以其为准。 画廊安装指南 Icarus的画廊插件同时包含了lightGallery与 Justified Gallery两种插件。 若要启用画廊插件，请将主题配置中plugins &gt; gallery的值设置为true。 1234themes/icarus/_config.ymlplugins: gallery: true 另外，若要使用Justified Gallery，请将你的多个图片包裹在与的HTML标签对中。 并且如果你使用的是Markdown语法来引用图片的话，请在HTML标签和Markdown之间添加空行。 例如下方的效果预览的Markdown代码为： 1Justified-Gallery-Markdown.md 同样，我们也可使用纯HTML来实现Justified Gallery，这样标签之间就不需要添加空行了： 1Justified-Gallery-HTML.md 效果预览 下面是Justified Gallery实现的多图片网格化展示。点击其中的任意可另外查看lightGallery的全图展示效果。 下面的图片来源于pexel.com KaTeX安装指南 你可以使用KaTeX插件来渲染TEXTEX数学公式。若要启用KaTeX插件，请将主题配置中plugins &gt; katex的值设置为true。 1234themes/icarus/_config.ymlplugins: katex: true 在使用时，请使用\\\\(和\\\\)包裹行内公式，$$或\\\\[与\\\\]标签对包裹块状公式。例如： 1Some-Post.md 有时你的TEXTEX语法会被错认为Markdown语法而导致公式渲染异常。 例如，下面的公式不会渲染成功，因为其中包含多个_(下划线)而被Markdown渲染器错误的认成Markdown的斜体字语法。 12345Some-Post.md$$\\hat{x}_{k}=\\hat{x}_{k}^{-}+K_{t}\\left(y_{k}\\right)$$ 在这种情况下，你可以选择转义每个可能导致歧义的字符： 12345Some-Post.md$$\\hat{x}\\_{k}=\\hat{x}\\_{k}^{-}+K\\_{t}\\left(y\\_{k}\\right)$$ 或是简单的将整个公式用一个HTML标签包裹起来： 1234567Some-Post.md&lt;div&gt;$$\\hat{x}_{k}=\\hat{x}_{k}^{-}+K_{t}\\left(y_{k}\\right)$$&lt;/div&gt; MathJax安装指南 你可以使用MathJax插件来渲染TEXTEX，MathML，或AsciiMath数学公式。若要启用MathJax插件，请将主题配置中plugins &gt; mathjax的值设置为true。 1234themes/icarus/_config.ymlplugins: mathjax: true 当使用TEXTEX语法时，请使用$或\\\\(与\\\\)包裹行内公式，$$或\\\\[与\\\\]标签对包裹块状公式。或者使用LATEXLATEX环境。例如： 1Tex-Example.md 或者直接使用MathML语法。例如： 1MathML-Example.md 同样MathJax也支持AsciiMath，公式使用```包裹。 1AsciiMath-Example.md 有时你的TEXTEX语法会被错认为Markdown语法而导致公式渲染异常。 请参照KaTeX一节来解决此问题。 效果预览(TEXTEX &amp; LATEXLATEX) 这是一个行内公式：ax2+bx+c=0ax2+bx+c=0。这是另一个行内公式：ax2+bx+c&gt;0ax2+bx+c&gt;0。 这是一个块状公式：1(√ϕ√5−ϕ)e25π=1+e−2π1+e−4π1+e−6π1+e−8π1+⋯1(ϕ5−ϕ)e25π=1+e−2π1+e−4π1+e−6π1+e−8π1+⋯ 这是另一个块状公式：f(x)=∫∞−∞^f(ξ)e2πiξxdξf(x)=∫−∞∞f^(ξ)e2πiξxdξ 或者使用LATEXLATEX环境：A=[abcc]A=[abcc] 效果预览(MathML) 当 a≠0a≠0， 方程 ax2+bx+c=0ax2+bx+c=0 有两个解，它们是x=−b±√b2−4ac2a.x=-b±b2-4ac2a. 效果预览(AsciiMath) 当a≠0a≠0，方程ax2+bx+c=0ax2+bx+c=0有两个解，它们是 x=−b±√b2−4ac2ax=-b±b2-4ac2a. 浏览器升级提醒 (Outdated Browser)安装指南 你可以开启浏览器升级提醒(Outdated Browser)来提醒使用老旧浏览器的网站访客升级浏览器。 若要启用此插件，请将主题配置中plugins &gt; outdated_browser的值设置为true。 点击此处即可预览插件开启效果。 1234themes/icarus/_config.ymlplugins: outdated_browser: true 网页载入动画安装指南 Icarus默认启用网页载入动画，若需禁止载入动画，请将plugins &gt; animejs的值设置为false。 1234themes/icarus/_config.ymlplugins: animejs: false 另外，若需隐藏网页载入进度条，请将plugins &gt; progressbar的值设置为false。 1234themes/icarus/_config.ymlplugins: progressbar: false 常见问题本文展示了一些经常被提及的Icarus使用问题以及这些问题的解答。 如果此处没有出现你想要求解的问题是，也请阅读Icarus用户指南，Hexo中文文档， 以及Icarus GitHub Issues。 站点无法生成我的Hexo站点。/我的站点在生成时出现错误。 Icarus依赖8.3.0或更新版本的Node.js，4.2.0或更新版本的Hexo，以及其他一些在themes/icarus/package.json 文件的peerDependencies部分列出的依赖包。 请确保你的站点正确安装了所有依赖。 例外，你之前使用的主题残留下来的依赖有可能会干扰Icarus的正常运行。 请在更换到Icarus主题之前移除它们。 如何改变我的站点的语言？ 编辑你站点根目录下的_config.yml文件，修改如下设置： 1234_config.yml- language: en+ language: &lt;language_name&gt; 你可以在themes/icarus/languages目录下找到所有可用的翻译。 _config.yml的语言名即为这些文件不带后缀的文件名。 布局我如何改变页面的宽度？我如何在特定的文章/页面使用单栏/双栏/三栏布局？ 如要改变页面的宽度，你需要编辑themes/icarus/include/style/responsive.styl这个样式文件。 这个文件定义了不同屏幕尺寸下的页面容器宽度。 如果你同时想改变主内容栏或挂件栏的宽度，请编辑themes/icarus/layout/common/widgets.jsx和themes/icarus/layout/layout.jsx。 在文件中找到is-12，is-8-tablet，和is-4-widescreen这样的CSS类名并把它们修改成你想要的数值。 你可以参考Bulma文档来获取更多关于布局系统的细节。 请确保主内容栏和挂件栏的CSS类名称中的数字在相同屏幕尺寸下相加等于12。 例如，如果你想把挂件栏的宽度修改为is-3-widescreen并且你只有一个挂件栏，那么你需要保证你的主内容栏有一个is-9-widescreen。 你可以通过从主题配置中移除所有挂件来实现单栏布局。 如果要使用双栏布局，请将所有挂件的position设置为left或right，从而将它们放置按照页面的同一侧。 三栏布局可以通过在页面两侧同时放置挂件来实现。 若要更改特定的文章或页面的布局，请参考Icarus用户指南 - 主题配置。 挂件/评论插件/分享按钮…的布局文件在哪里？我如何自定义内置的挂件/评论插件/分享按钮…？ 评论插件，捐赠按钮，站内搜索，分享按钮，挂件，以及其他一些插件的布局文件已移至一个单独的Node.js库——hexo-component-inferno。 这样，主题开发者可以更好地在不同主题之间复用这些通用组件，并且允许用户更简便地覆盖这些内置组件。 若要自定义这些组件，你可以从hexo-component-inferno仓库中拷贝布局文件并把它们放入Icarus布局目录下的的相应目录中。 例如，如果你想要自定义Valine评论插件，你可以从hexo-component-inferno仓库中拷贝src/view/comment/valine.jsx到themes/icarus/layout/comment目录中。 然后，修正此文件头部的一些Node.js引用 1234themes/icarus/layout/comment/valine.jsx- const { cacheComponent } = require('../../util/cache');+ const { cacheComponent } = require('hexo-component-inferno/lib/util/cache'); 之后，用hexo clean清理你的站点并重新生成HTML文件。 类似的，你可以复制hexo-component-inferno仓库中的文件并放入themes/icarus/source下的对应目录中来覆盖 主题内置的静态文件。 我对布局文件进行了一些修改。但是当我刷新页面(开启了hexo server的情况下)/当我hexo generate时 为什么这些修改没有生效？ 当你用hexo server开启本地Hexo服务器时，这些布局文件会被缓存。 其他情况下临时生成的数据会被缓存在db.json或者内存中。 请在hexo server或hexo generate之前使用hexo clean。 内容我的Logo/图片没有正确显示。/我的图片仅在首页显示，却无法在文章页面显示。 请确保你使用了图片的绝对路径。 例如，如果你的图片放在了source/gallery/目录下，并且你的站点位于你域名的子目录下，如https://ppoffice.github.io/hexo-theme-icarus， 那么你应该用/hexo-theme-icarus/gallery/&lt;文件名&gt;.&lt;文件扩展名&gt;来引用你的图片。 你也可以使用![img]()这个Hexo标签来省去路径中的网站子目录：{% img /gallery/. ... %}。 请参考Hexo中文文档来了解详情。 如何为文章添加摘要？如何显示“阅读更多”按钮？ 在你的文章中添加``标签。 标签前面的文章内容会被标记为摘要，而其后的内容不会显示在文章列表上。 你也可以在文章的front-matter中设置自定义摘要。 1234567some-post.mdtitle: 一篇文章date: 2020-01-01excerpt: 这是一篇关于...---# 文章内容... 我如何加密文章？ 请使用第三方的Hexo插件，比如hexo-blog-encrypt。 我如何像这篇文章一样使用炫酷的页面元素或样式？ 你可以在你的Markdown文件中使用HTML。 请参考Bulma文档来了解更多的可选元素和样式。 挂件与插件我的页面上显示红色的警告，上面说某个插件/挂件的配置项没有填写。 我怎样才能除去这些警告？ 如果你不想开启某些插件/挂件，你可以把它们从配置中删掉或注释掉。 例如，如果你不想开启任何的评论插件，注释掉这几行： 12345678themes/icarus/_config.yml- comment:- type: disqus- shortname: + # comment:+ # type: disqus+ # shortname:","link":"/post/2020/Git/"}],"tags":[{"name":"Git,Github,bash","slug":"Git-Github-bash","link":"/tags/Git-Github-bash/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"}],"categories":[]}